name: stage-flow

on:
  push:
    branch: main

# ToDo: adapt names
env:
  GAME_EXECUTABLE_NAME: vtt_mapper
  GAME_OSX_APP_NAME: VTTMAPPER

jobs:
  build-macOS:
    runs-on: macOS-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Remove build script
        run: |
          rm build.rs
      - name: Build release
        run: |
          cargo build --release --features native
      - name: Create release
        run: |
          mkdir -p build/macos/src/Game.app/Contents/MacOS/assets
          cp -r assets/ build/macos/src/Game.app/Contents/MacOS/assets
          cp -r credits/ build/macos/src/Game.app/Contents/MacOS/credits
          cp target/release/${{ env.GAME_EXECUTABLE_NAME }} build/macos/src/Game.app/Contents/MacOS/
          strip build/macos/src/Game.app/Contents/MacOS/${{ env.GAME_EXECUTABLE_NAME }}
          mv build/macos/src/Game.app build/macos/src/${{ env.GAME_OSX_APP_NAME }}.app
          hdiutil create -fs HFS+ -volname "${{ env.GAME_OSX_APP_NAME }}" -srcfolder build/macos/src ${{ env.GAME_EXECUTABLE_NAME }}.dmg
      - name: Upload to Spaces
        uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.ACCESS_KEY}}
          secret_key: ${{ secrets.SECRET_KEY }}
          space_name: ${{ secrets.SPACE_NAME }}
          space_region: ${{ secrets.SPACE_REGION }}
          source: staging_${{ env.GAME_EXECUTABLE_NAME }}.dmg

  build-linux:
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install Dependencies
        run: sudo apt-get update; sudo apt-get install pkg-config libx11-dev libasound2-dev libudev-dev
      - name: Build release
        run: |
          cargo build --release --features native
      - name: Prepare release
        run: |
          strip target/release/${{ env.GAME_EXECUTABLE_NAME }}
          chmod +x target/release/${{ env.GAME_EXECUTABLE_NAME }}
          mv target/release/${{ env.GAME_EXECUTABLE_NAME }} .
      - name: Bundle release
        run: |
          tar -czf ${{ env.GAME_EXECUTABLE_NAME }}_linux.tar.gz ${{ env.GAME_EXECUTABLE_NAME }} assets credits
      - name: Upload to Spaces
        uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.ACCESS_KEY}}
          secret_key: ${{ secrets.SECRET_KEY }}
          space_name: ${{ secrets.SPACE_NAME }}
          space_region: ${{ secrets.SPACE_REGION }}
          source: staging_${{ env.GAME_EXECUTABLE_NAME }}_linux.tar.gz

  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Build release
        run: |
          cargo build --release --features native
      - name: Prepare release
        run: |
          mkdir target/release/assets && cp -r assets target/release/assets
          mkdir target/release/credits && cp -r credits target/release/credits
      - name: Zip release
        uses: papeloto/action-zip@v1
        with:
          files: target/release/assets/ target/release/${{ env.GAME_EXECUTABLE_NAME }}.exe
          dest: ${{ env.GAME_EXECUTABLE_NAME }}_windows.zip
      - name: Upload to Spaces
        uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.ACCESS_KEY}}
          secret_key: ${{ secrets.SECRET_KEY }}
          space_name: ${{ secrets.SPACE_NAME }}
          space_region: ${{ secrets.SPACE_REGION }}
          source: staging_${{ env.GAME_EXECUTABLE_NAME }}_windows.zip

  build-web:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install Dependencies
        run: sudo apt-get update; sudo apt-get install pkg-config libx11-dev libasound2-dev libudev-dev
      - name: Install cargo-make
        run: |
          cargo install cargo-make
      - name: Add wasm target
        run: |
          rustup target add wasm32-unknown-unknown
      - name: Build Release
        run: |
          cargo make release
      - name: Upload to Spaces
        uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.ACCESS_KEY}}
          secret_key: ${{ secrets.SECRET_KEY }}
          space_name: ${{ secrets.SPACE_NAME }}
          space_region: ${{ secrets.SPACE_REGION }}
          source: build/web/
          out_dir: staging
